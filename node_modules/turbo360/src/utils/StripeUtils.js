var Promise = require('bluebird')
var superagent = require('superagent')

var StripeUtils = function(config){
	var _config = config	

	var createStripeAccount = function(config){ // requires stripeRef, client, stripeToken values
	    return new Promise(function (resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

	    	if (config.stripeRef == null){
		        reject(new Error('Missing stripeRef'))
	    		return
	    	}
	    	if (config.client == null){
		        reject(new Error('Missing Client Parameter'))
	    		return
	    	}
	    	if (config.stripeToken == null){
		        reject(new Error('Missing StripeToken Parameter'))
	    		return
	    	}

			config.stripeRef.customers.create({
				description: config.client._id.toString(),
				source: config.stripeToken
			}, function(err, customer) {
				if (err){
					reject(err)
					return
				}
				
				var card = customer.sources.data[0]
				config.client['stripeId'] = customer.id
				config.client['creditCard'] = {
					id: customer.id,
					lastFour: card.last4,
					exp_month: card.exp_month,
					exp_year: card.exp_year,
					brand: card.brand
				}

				resolve(config.client)
				return
			})
	    })
	}

//	var createNonregisteredStripeCharge = function(stripeToken, amount, description){
	var createStripeCharge = function(config){
	    return new Promise(function (resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

	    	if (config.stripeRef == null){
		        reject(new Error('Missing stripeRef'))
	    		return
	    	}
	    	if (config.amount == null){
		        reject(new Error('Missing Amount Parameter'))
	    		return
	    	}
	    	if (config.stripeToken == null){
		        reject(new Error('Missing StripeToken Parameter'))
	    		return
	    	}
	    	if (config.description == null){
		        reject(new Error('Missing Description Parameter'))
	    		return
	    	}

			config.stripeRef.charges.create({
				amount: config.amount*100, // amount in cents
				currency: 'usd',
				source: config.stripeToken,
				description: config.description,
			}, function(err, charge) {
				if (err){
		            reject(err)
		            return
				}

		    	resolve(charge)
			})
	    })
	}

	var recurringCharge = function(config){
	    return new Promise(function (resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

	    	if (config.stripeRef == null){
		        reject(new Error('Missing stripeRef'))
	    		return
	    	}

	    	if (config.amount == null){
		        reject(new Error('Missing amount parameter'))
	    		return
	    	}

	    	if (config.customerId == null){
		        reject(new Error('Missing customerId parameter'))
	    		return
	    	}

	    	if (config.description == null){
		        reject(new Error('Missing description parameter'))
	    		return
	    	}

			config.stripeRef.charges.create({
				amount: config.amount*100, // convert amount to cents
				currency: 'usd',
				customer: config.customerId,
				description: config.description,
			}, function(err, charge) {
				if (err){ // check for `err`
		            reject(err)
		            return
				}

		    	resolve(charge)
			})
	    })
	}

	// var initializeWithText = function(stripePublicKey, text, callback, onClosed){
	var initializeStripe = function(config){
		return new Promise(function (resolve, reject){
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (config.stripePublicKey == null){
				reject(new Error('Missing stripePublicKey'))
				return
			}

			if (config.text == null){
				reject(new Error('Missing text'))
				return
			}

			if (config.callback == null){
				reject(new Error('Missing callback'))
				return
			}

			// optional params
			var image = config.image || '/images/logo_260.png'
			var withAddress = config.withAddress || true

			var stripe = StripeCheckout.configure({
				key: config.stripePublicKey,
				image: image,
				address: withAddress,
				locale: 'auto',
				panelLabel: config.text,
				token: function(token) { // You can access the token ID with `token.id`
					config.callback(token)
				},
				closed: function() {
					if (config.onClosed)
						config.onClosed()
				}
			})

			resolve(stripe)
		})
	}

	var submitStripeCharge = function(token, product){
		return new Promise(function(resolve, reject) {
			if (_config.site_id == null){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			if (_config.site_id.length < 20){
				reject(new Error('Please Set Your TURBO_APP_ID'))
				return
			}

			// var price = product.price || product.tuition

			var body = {
				site: _config.site_id,
				exec: 'create-stripe-charge',
				stripeToken: token.id,
				email: token.email,
				name: token.card.name,
				amount: product.price, // this should come from backend
				description: product.description
				// type: product.schema,
				// product: product.id
			}

			superagent.post(_config.base_url + '/functions')
			.send(body)
			.set('Accept', 'application/json')
			.end(function(err, res){
				if (err){ 
					reject(err)
					return
				}
				
				if (res.body.confirmation != 'success'){
					reject({message:res.body.message})
		    		return
				}

				resolve(res.body)
			})
		})		
	}

	var instance = {
		createStripeAccount: createStripeAccount,
		createStripeCharge: createStripeCharge, // called from backend
		recurringCharge: recurringCharge,
		initializeStripe: initializeStripe,
		submitStripeCharge: submitStripeCharge // called from client side
	}

	return instance
}

module.exports = StripeUtils